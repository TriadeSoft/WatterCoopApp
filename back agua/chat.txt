from pydantic import BaseModel, EmailStr
from sqlalchemy import Column, Integer, String, create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
import os

# Configuración de la base de datos con SQLAlchemy
DATABASE_URL = os.getenv("DATABASE_URL", "mysql+pymysql://root:admin@localhost:3307/Local_instance_MySQL81")
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# models/schema.py
class UsuarioBase(BaseModel):
    """
    Esquema base para validar datos de usuario.
    """
    nombre: str
    apellido: str
    direccion: str
    telefono: str
    email: EmailStr  # Valida formato de correo
    dni: str

class UsuarioCreate(UsuarioBase):
    """
    Esquema para la creación de un usuario.
    """
    pass

class UsuarioResponse(UsuarioBase):
    """
    Esquema de respuesta con ID incluido.
    """
    id_usuario: int

    class Config:
        from_attributes = True  # Permite convertir SQLAlchemy a Pydantic

# models/usuario_model.py
class Usuario(Base):
    __tablename__ = "usuarios"
    
    id_usuario = Column(Integer, primary_key=True, index=True)
    nombre = Column(String(100), nullable=False)
    apellido = Column(String(100), nullable=False)
    direccion = Column(String(100), nullable=False)
    telefono = Column(String(15), nullable=False)
    email = Column(String(100), unique=True, nullable=False)
    dni = Column(String(8), unique=True, nullable=False)

# controllers/usuario_controller.py
from fastapi import HTTPException
from services.usuario_service import UsuarioService
from models.schema import UsuarioCreate, UsuarioResponse

class UsuarioController:
    def __init__(self):
        self.service = UsuarioService()

    def create(self, usuario: UsuarioCreate):  # Crear usuario
        try:
            return self.service.create(usuario)
        except Exception as e:
            raise HTTPException(status_code=400, detail=str(e))

    def get_all(self):  # Buscar a todos
        return self.service.get_all()

    def get_by_id(self, id_usuario: int):  # Buscar por id
        return self.service.get_by_id(id_usuario)

# repositories/usuario_repository.py
from sqlalchemy.orm import Session
from models.usuario_model import Usuario
from models.schema import UsuarioCreate
from database import SessionLocal

class UsuarioRepository:
    def __init__(self):
        self.db = SessionLocal()

    def create(self, usuario: UsuarioCreate):
        db_usuario = Usuario(
            nombre=usuario.nombre,
            apellido=usuario.apellido,
            direccion=usuario.direccion,
            telefono=usuario.telefono,
            email=usuario.email,
            dni=usuario.dni.zfill(8)
        )
        self.db.add(db_usuario)
        self.db.commit()
        self.db.refresh(db_usuario)
        return db_usuario

    def get_all(self):
        return self.db.query(Usuario).all()

    def get_by_id(self, id_usuario: int):
        return self.db.query(Usuario).filter(Usuario.id_usuario == id_usuario).first()

# routes/usuario_routes.py
from fastapi import APIRouter
from controllers.usuario_controller import UsuarioController
from models.schema import UsuarioCreate

router = APIRouter()
controller = UsuarioController()

@router.get("/usuarios/")
def get_all_usuarios():
    return controller.get_all()

@router.get("/usuarios/{id_usuario}")
def get_usuario(id_usuario: int):
    return controller.get_by_id(id_usuario)

@router.post("/usuarios/")
def create_usuario(usuario: UsuarioCreate):
    return controller.create(usuario)

# services/usuario_service.py
from repositories.usuario_repository import UsuarioRepository
from models.schema import UsuarioCreate

class UsuarioService:
    def __init__(self):
        self.repository = UsuarioRepository()

    def create(self, usuario: UsuarioCreate):
        return self.repository.create(usuario)

    def get_all(self):
        return self.repository.get_all()

    def get_by_id(self, id_usuario: int):
        result = self.repository.get_by_id(id_usuario)
        if result:
            return result
        raise Exception(f"Usuario con id {id_usuario} no encontrado.")
